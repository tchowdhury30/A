public double force(double g, double m1, double m2, double r){
  return ((g*m1*m2)/(r*r));
}

public double average3(int a, int b, int c){
  return (Double.valueOf(a+b+c) / 3.0);
}

public double sumOfSines(double t){
  double t0 = Math.toRadians(t);
  double sum = (Math.sin(2.0*t0)) + (Math.sin(3.0*t0));
  double ans = Math.round(sum * 1000.0) / 1000.0;
  return ans;
}

public int oddsAreNegated(int x){
  if (x%2 == 0) {
    return x;
  } else {
    return (-1*x);
  }
}

public int noTeenSum(int a, int b, int c) {
  return (fixTeen(a)+fixTeen(b)+fixTeen(c));
}

public int fixTeen(int n) {
  if (n < 13 || n > 19 ) {
    n = n;
  } else {
    if ((n == 15) || (n == 16)) {
       n = n;
    } else {
        n = 0;
    }
}
  return n;
}

public String stringTimes(String str, int n) {
  String result = "";
  for (int i=0; i<n; i++) {
    result = result + str;  // could use += here
  }
  return result;
}

public int countEvens(int[] nums) {
  int x = 0;
  for (int i = 0; i < nums.length; i++) {
    if ((nums[i])%2 == 0) {
      x = x + 1;
    } else {
      x = x;
    }
  }
  return x;
}

public boolean sum28(int[] nums) {
  int x = 0;
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] == 2) {
      x = x + 2;
    } else {
      x = x;
    }
  }
  return x == 8;
}

public boolean scoresIncreasing(int[] scores) {
  for (int i = 1; i < (scores.length - 1); i++) {
    if (scores[i] > scores[i+1]) {
      return false;
    }
  }
  return true; 
}
